<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features</title>
    <url>/2023/11/05/A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features/</url>
    <content><![CDATA[<p><a name="U4kBh"></a></p>
<h4 id="A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features-基于API-序列内在特征并且使用深度学习框架的动态恶意软件检测作者-Ce-Li-a-b-Qiujian-Lva-Ning-Lia-Yan-Wang-a-b-∗-Degang-Sun-a-b-Yuanyuan-Qiao-c"><a href="#A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features-基于API-序列内在特征并且使用深度学习框架的动态恶意软件检测作者-Ce-Li-a-b-Qiujian-Lva-Ning-Lia-Yan-Wang-a-b-∗-Degang-Sun-a-b-Yuanyuan-Qiao-c" class="headerlink" title="**A novel deep framework for dynamic malware detection based on API sequence intrinsic features**基于API 序列内在特征并且使用深度学习框架的动态恶意软件检测作者 Ce Li a,b, Qiujian Lva, Ning Lia, Yan Wang a,b,∗, Degang Sun a,b, Yuanyuan Qiao c"></a>**A novel deep framework for dynamic malware detection based on API sequence intrinsic features<br>**基于API 序列内在特征并且使用深度学习框架的动态恶意软件检测<br>作者 Ce Li a,b, Qiujian Lva, Ning Lia, Yan Wang a,b,∗, Degang Sun a,b, Yuanyuan Qiao c</h4><p><a name="HrPRE"></a></p>
<h4 id="a-Institute-of-Information-Engineering-Chinese-Academy-of-Science-Beijing-China"><a href="#a-Institute-of-Information-Engineering-Chinese-Academy-of-Science-Beijing-China" class="headerlink" title="a  Institute of Information Engineering, Chinese Academy of Science, Beijing, China"></a>a  Institute of Information Engineering, Chinese Academy of Science, Beijing, China</h4><p><a name="d5Sgl"></a></p>
<h4 id="b-School-of-Cyber-Security-University-of-Chinese-Academy-of-Science-Beijing-China"><a href="#b-School-of-Cyber-Security-University-of-Chinese-Academy-of-Science-Beijing-China" class="headerlink" title="b School of Cyber Security, University of Chinese Academy of Science, Beijing, China"></a>b School of Cyber Security, University of Chinese Academy of Science, Beijing, China</h4><p><a name="lasB8"></a></p>
<h4 id="c-School-of-Artiﬁcial-Intelligence-Beijing-University-of-Posts-and-Telecommunications-Beijing-China"><a href="#c-School-of-Artiﬁcial-Intelligence-Beijing-University-of-Posts-and-Telecommunications-Beijing-China" class="headerlink" title="c School of Artiﬁcial Intelligence, Beijing University of Posts and Telecommunications, Beijing, China"></a>c School of Artiﬁcial Intelligence, Beijing University of Posts and Telecommunications, Beijing, China</h4><p><a name="UgjPT"></a></p>
<h4 id="本文针对的恶意软件检测是Windows平台上的，采用的分析方法是API序列分析"><a href="#本文针对的恶意软件检测是Windows平台上的，采用的分析方法是API序列分析" class="headerlink" title="本文针对的恶意软件检测是Windows平台上的，采用的分析方法是API序列分析"></a><br>本文针对的恶意软件检测是Windows平台上的，采用的分析方法是API序列分析</h4><p><a name="O5XaD"></a></p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>创新：提出了三种度量API序列语义信息的内在特征：<ul>
<li>the software behavior</li>
<li>the semantic information of APIs</li>
<li>the relationship between API calls.</li>
</ul>
</li>
<li><a href="https://github.com/friendllcc/Malware-Detection-API-Sequence-Intrinsic-Features">开源</a>：提供数据库以及代码</li>
<li>思想：每个API的命名还有语义信息、API序列之间含有调用关系</li>
</ul>
<p><a name="UQZmu"></a></p>
<h4 id="先前研究的不足"><a href="#先前研究的不足" class="headerlink" title="先前研究的不足"></a>先前研究的不足</h4><ul>
<li><p>现有的关于API序列的分析，所抓取到的特征不够深入，仅仅停留在API的名字、API的使用频率上</p>
</li>
<li><p>已有的研究</p>
<ul>
<li>静态分析在遇到代码混淆时变得无用</li>
<li>在运行时，软件必须unpack，动态分析变得更有效率在遇到代码混淆时</li>
</ul>
</li>
</ul>
<ul>
<li><p>本文所提到一些ML与DL算法：</p>
<ul>
<li><p>ML中分析API序列的算法：</p>
<ul>
<li>K-Nearest Neighbor (KNN) </li>
<li>Naive Bayes (NB),</li>
<li>Decision Tree (DT),</li>
<li>Support Vector Machine (SVM)</li>
</ul>
</li>
<li><p>本文所使用到的DL算法：</p>
<ul>
<li>1D  CNN</li>
<li>Multi-layer Convolution</li>
<li>Bi-LSTM<ul>
<li>Çatak et al. (2020) use embedding layer and Long Short-Term Memory (LSTM) model to capture relationship between API calls in the API sequence.</li>
</ul>
</li>
<li>Embedding Layer<ul>
<li>（Amer and Zelinka (2020) use word embedding method to represent every API name as a vector which contains contextual information.）<br><a name="MOkjQ"></a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="本文研究"><a href="#本文研究" class="headerlink" title="本文研究"></a>本文研究</h4><ul>
<li><strong>Frame</strong><ul>
<li><strong>Component</strong><ul>
<li><strong>An intrinsic feature encoder</strong></li>
<li><strong>A Multi-Layer Perceptron (MLP) classiﬁer</strong></li>
</ul>
</li>
<li><strong>Intrinsic feature encoding methods</strong><ul>
<li><strong>API Phrase</strong></li>
<li><strong>Semantic Chain</strong></li>
<li>** Bi-LSTM**</li>
</ul>
</li>
<li><strong>Purpose</strong><ul>
<li><strong>Characterize the multiple intrinsic features from the API sequence</strong></li>
<li>** Combine them to identify whether the running software is malicious or not**</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/38969425/1697981635382-da7359fb-132a-47d7-8062-85162b89263b.png#averageHue=%23f4f3f1&clientId=u002786a4-19e8-4&from=paste&height=316&id=ua803f825&originHeight=631&originWidth=1561&originalType=binary&ratio=2&rotation=0&showTitle=false&size=376417&status=done&style=none&taskId=u263afe9d-f6e0-41ce-b30b-8e9e46079ce&title=&width=780.5" alt="image.png"><br><a name="AX501"></a></p>
<h4 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h4><p>API序列包含了软件行为、语义信息、API之间的联系信息</p>
<ul>
<li><strong>API Phrase</strong><ul>
<li>模型作用：描述了软件行为</li>
<li>编码过程<ul>
<li>将每一个API名字转化为一个向量，然后再将API 序列转化为一个序列矩阵</li>
<li>通过三个不同的卷积层，将序列矩阵转化为特征映射，使用不同的卷积核可以提取出不同长度下<strong>API Phrase</strong>的特征</li>
</ul>
</li>
<li><strong>API embedding</strong><ul>
<li><strong>使用嵌入层将每个API名字转化为一个K维度的特征向量</strong></li>
</ul>
</li>
<li><strong>API Sequence</strong><ul>
<li>**A 1: n = a 1  a 2  ···  an **</li>
</ul>
</li>
<li><strong>1D CNN  可以将序列矩阵转化为可以表示软件行为的API Phrase的特征映射</strong></li>
</ul>
</li>
</ul>
<p><img src="/2023/11/05/A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features/1697982509557-e2ad6561-22f2-4dcc-bcac-6ec0d6900c5e.png" alt="image.png"></p>
<ul>
<li><p><strong>Semantic chain</strong></p>
<p>API 命名语义上包含这多种信息 例如：<strong>action and operation object</strong>，将单个API可以拆解成以下形式<br><strong>q i =&lt; action i , object i , class i , category i &gt; .</strong><br><img src="/2023/11/05/A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features/1697982835143-b4676c95-5990-4e3e-8384-8891152712e0.png" alt="image.png"><br><strong>与上文API Sequence的重定义一样，Semantic chain可以被定义为</strong><br>**Q 1: n = Q 1  Q 2  ···  Qn **</p>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/38969425/1697983052216-5323026d-ade2-4370-9b37-82f7126a5c1a.png#averageHue=%23f4f1f1&clientId=u5b663740-94d7-4&from=paste&height=436&id=uf01f350f&originHeight=871&originWidth=1581&originalType=binary&ratio=2&rotation=0&showTitle=false&size=344348&status=done&style=none&taskId=ubadc5bbb-51df-4349-840f-1375c27d241&title=&width=790.5" alt="image.png"></p>
<ul>
<li>编码过程<ul>
<li>通过嵌入层将semantic chain转化为一个矩阵</li>
<li>通过一个的卷积层，获取semantic chain的特征映射</li>
</ul>
</li>
<li><strong>Bi-LSTM for relationship information representation</strong><ul>
<li><strong>将API Phrase和Semantic chain作为Bi- LSTM输入（X = m  m ′= { x 1, x 2, x t, . . . }）</strong></li>
<li><strong>隐藏层输出H = { h 1, h 2, h t, . . . }作为分类模型的输入</strong></li>
</ul>
</li>
</ul>
<p><img src="/2023/11/05/A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features/1697983286524-9d529b7a-b7d7-43e5-ade8-d6af39537cb4.png" alt="image.png"><br><a name="WdWKi"></a></p>
<h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p><img src="/2023/11/05/A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features/1698237042639-6237a5fb-08d9-429e-b618-adf004d5cfdb.png" alt="image.png"><br><img src="/2023/11/05/A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features/1698237121923-f97e7b36-fa28-4d33-8647-c2ab159b7591.png" alt="image.png"><br><img src="/2023/11/05/A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features/1698237052665-204d944e-0a1f-469d-a29d-48ad99728ae5.png" alt="image.png"></p>
<p><img src="/2023/11/05/A-novel-deep-framework-for-dynamic-malware-detection-based-on-API-sequence-intrinsic-features/1698237141082-4cb76a1f-fdbf-479a-9eb1-57b36bfcc610.png" alt="image.png"><br><a name="sSVDG"></a></p>
<h4 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h4><p>总结</p>
<ul>
<li>xxxxxx</li>
<li>xxxxxx</li>
<li>xxxxxx</li>
</ul>
<p><a name="cbjPo"></a></p>
<h4 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h4><ol>
<li>xxxxx</li>
<li>xxxxx</li>
<li>xxxxxxx</li>
<li>xxxxx</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>修改侧边栏文字</title>
    <url>/2021/02/03/hexo%E4%BF%AE%E6%94%B9%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%96%87%E5%AD%97/</url>
    <content><![CDATA[<p> 这玩意，我<strong>真的真的</strong>找了好久答案，我把所有themes中的文件都找了一遍，想找到侧边栏中的文字，结果….，tmd，我说为啥会有一个language 文件夹，原来里面有个文件，设置<strong>中英文对照关系</strong>。</p>
<a id="more"></a>

<h1 id="主题的-cONfig-yml文件："><a href="#主题的-cONfig-yml文件：" class="headerlink" title="主题的_cONfig.yml文件："></a>主题的_cONfig.yml文件：</h1><h2 id="直接敲文字进去？"><a href="#直接敲文字进去？" class="headerlink" title="直接敲文字进去？"></a>直接敲文字进去？</h2><p>==要这样我还能这么生气?==</p>
<p>1.回到你的blog根目录</p>
<p>2.键入 <code>hexo new page &quot;不会编程的Kinferiority&quot;</code></p>
<p>你会发现你的source文件夹中出现了上述文件夹，里面有一个默认的index.html文件</p>
<p>3.打开主题下的_config.yml文件,在menu中添加上 不会编程的Kinferiority：/</p>
<p><strong>此处==：/==代表回到主页</strong></p>
<p>然后我们在创建的文件夹下面继续编写markdown文件就可以啦。</p>
<p><img src="/2021/02/03/hexo%E4%BF%AE%E6%94%B9%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%96%87%E5%AD%97/image-20231105155538146.png" alt="image-20231105155538146"></p>
]]></content>
  </entry>
  <entry>
    <title>【Hexo】使用hexo+github搭建个人博客</title>
    <url>/2021/02/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/</url>
    <content><![CDATA[<p>  一些废话，我可能在文档中中英文混杂，想锻炼写自己的英文写作水平（无聊），希望各位阅读没有障碍</p>
<a id="more"></a>

<!-- toc -->

<h1 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h1><p><u>环境</u>：macOS Big Sur11.1</p>
<p><u>使用工具</u>：shell+cnmp+hexo+github</p>
<p><u>搭建时间</u> ：2021.2.2</p>
<h1 id="Node-js-Tool"><a href="#Node-js-Tool" class="headerlink" title="Node.js Tool"></a>Node.js Tool</h1><h2 id="Download-Node-js"><a href="#Download-Node-js" class="headerlink" title="Download Node.js"></a>Download Node.js</h2><p><a href="https://nodejs.org/zh-cn/">Download</a></p>
<p>选择长期支持版</p>
<h2 id="Open-your-terminal"><a href="#Open-your-terminal" class="headerlink" title="Open your terminal"></a>Open your terminal</h2><h3 id="Fundamental-knowledge"><a href="#Fundamental-knowledge" class="headerlink" title="Fundamental knowledge"></a>Fundamental knowledge</h3><p><code>pwd</code>   ==<strong>查看当前目录</strong>==</p>
<p><code>cd xxx</code>  ==<strong>进入xxx文件</strong>==</p>
<p><code>mkdir xxx </code>   ==<strong>创建xxx文件夹</strong>==</p>
<p><code>sudo +命令</code>   ==<strong>在管理员模式下运行命令</strong>==</p>
<p><code>cd ..</code>   ==<strong>返回上一层目录</strong>==</p>
<p><code>cd ../..</code>  ==<strong>返回上两层目录</strong>==</p>
<p><code>ls -l</code>   ==<strong>列出当前目录文件</strong>==</p>
<h2 id="Take-orders-orderly"><a href="#Take-orders-orderly" class="headerlink" title="Take orders orderly"></a>Take orders orderly</h2><h3 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h3><p>1.<code>sudo su</code>  <strong>进入管理员模式</strong></p>
<p>2.<code>node -v</code> <strong>查看node.js版本</strong></p>
<p>3<code>.npm -v</code>  <strong>查看npm版本</strong></p>
<p>nmp 为保管理器，但是由于wall存在，下载速度较慢，我们使用cnpm利用taobao的镜像</p>
<p>4.<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> <strong>-g 表示全局</strong></p>
<p>5.<code>cnpm -v</code> <strong>查看版本</strong></p>
<p>6.<code>cnpm install -g hexo-cli</code>   <strong>安装hexo</strong></p>
<p>7.<code>hexo -v</code><strong>查看hexo版本</strong></p>
<h3 id="Create-file-folder-‘name-blog’"><a href="#Create-file-folder-‘name-blog’" class="headerlink" title="Create  file folder ‘name_blog’"></a>Create  file folder ‘name_blog’</h3><p>8.<code>pwd</code> <strong>查看当前目录</strong></p>
<p>9.<code>mkdir name_blog</code> <strong>在当前目录下创建名为name_blog的文件夹</strong></p>
<p>10.<code>cd name_blog</code> <strong>进入name_blog文件夹</strong></p>
<h3 id="Init-hexo"><a href="#Init-hexo" class="headerlink" title="Init hexo"></a>Init hexo</h3><p>11.<code>sudo hexo init</code> ==<strong>初始化hexo</strong>==</p>
<p>12.<code>hexo s </code>==<strong>部署hexo</strong>==</p>
<h3 id="Validate-hexo"><a href="#Validate-hexo" class="headerlink" title="Validate hexo"></a>Validate hexo</h3><p>13.在Safari中输入命令行中出现的网址：例如 localhost:4000</p>
<p>14.按下<code>ctrl+z</code>退出</p>
<h3 id="Create-your-markdown-file"><a href="#Create-your-markdown-file" class="headerlink" title="Create your markdown file"></a>Create your markdown file</h3><p>15.<code>hexo n &quot;我的第一篇博文&quot;</code> <strong>创建我的第一篇博客文章.md文件</strong></p>
<p>16.观察命令行中出现的文件地址</p>
<p> 例如/Users/jrk/kjr_blog/source/_posts/我的第一篇博文.md</p>
<p>17.<code>ls -l</code> <strong>查看当前目录文件</strong></p>
<p><u>==<strong>_config.yml为hexo配置文件</strong>==</u></p>
<p>18.<code>cd source/_posts/</code> </p>
<p>19.<code>ls -l</code> 会发现自己创建的文件</p>
<h3 id="Vim-your-markdown-file"><a href="#Vim-your-markdown-file" class="headerlink" title="Vim your markdown file"></a>Vim your markdown file</h3><p>20.vim 我的第一篇博文.md</p>
<p><strong>进入文件后按下I进入编辑模式</strong>，文件格式为.md</p>
<p><strong>按下esc，在英文状态下输入：wq</strong>==<strong>：wq表示退出并保存</strong>==</p>
<p>==<strong><u>hexo所有命令行均在name_blog目录下运行</u></strong>==</p>
<h3 id="Hexo-order"><a href="#Hexo-order" class="headerlink" title="Hexo order"></a>Hexo order</h3><p>21.<code>hexo clean</code> <strong>清理hexo等缓存文件</strong></p>
<p>22.<code>hexo g</code> <strong>生成hexo等文件</strong> <u>hexo generate</u></p>
<p>23<code>.hexo s</code> <strong>部署hexo</strong> <u>hexo server</u></p>
<p>24<code>.cnpm install --save hexo-deployer-git</code> <strong>使用git上传到github</strong></p>
<p>25.<code>vim _config.yml</code> 修改部分内容(最下面的deploy部分)</p>
<p>deploy:</p>
<p> type: ‘git’</p>
<p> repo: <a href="https://github.com/xxx/xxx.github.io.git">https://github.com/xxx/xxx.github.io.git</a> </p>
<p>==<strong>repo为你在github上创建的名为xxx/xxx.github.io的一个仓库</strong>==</p>
<p> branch: main</p>
<p><strong>很多视频branch为master，现在GitHub更新了，不再使用master作为默认main了，默认branch为main</strong></p>
<p>xxx为你的用户名，必须要同名。</p>
<p>26.<code>hexo d</code> <strong>start deploying</strong></p>
<p>期间会让你输入GitHub用户名和密码</p>
<h3 id="You-will-see"><a href="#You-will-see" class="headerlink" title="You will see"></a>You will see</h3><p>27.在Safari中输入xxx/xxx.github.io</p>
<p>会进入你<strong>创建我的第一篇博客文章.md</strong></p>
<h3 id="Waring"><a href="#Waring" class="headerlink" title="Waring"></a>Waring</h3><p>如果报错port 4000被占用</p>
<p>使用该命令 <code>hexo server -p 4001</code> <strong>换个端口</strong></p>
<p>Typora 中[doc]生效但是网页上不生效：使用<code>&lt;!-- doc --&gt;</code>插件<br><strong>cnpm install hexo-toc –save</strong><br>折叠文章使用<code>&lt;!-- more --&gt;</code>插件</p>
<p><strong>See you again.</strong></p>
]]></content>
      <tags>
        <tag>essay</tag>
      </tags>
  </entry>
</search>
